{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "assignment.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "7SXpaKwwGe5x"
      },
      "source": [
        "# TM10007 Assignment: ADNI"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "CiDn2Sk-VWqE",
        "outputId": "528d7546-58d1-4ede-9cfc-dd4c97366e1b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "source": [
        "# Run this to use from colab environment\n",
        "!pip install -q --upgrade git+https://github.com/karinvangarderen/tm10007_project.git"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "  Building wheel for brats (setup.py) ... \u001b[?25l\u001b[?25hdone\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ntIj3qfhreFu",
        "colab_type": "text"
      },
      "source": [
        "# Import necessary functions/packages"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rOtoCOptna4A",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# General packages\n",
        "import numpy as np \n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn\n",
        "from scipy import interp\n",
        "from scipy.stats import randint\n",
        "\n",
        "# Classifiers\n",
        "from sklearn import model_selection\n",
        "from sklearn.preprocessing import StandardScaler, RobustScaler, label_binarize\n",
        "from sklearn.feature_selection import RFECV, SelectFromModel\n",
        "from sklearn.linear_model import Lasso, RidgeClassifier\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.model_selection import ShuffleSplit, StratifiedShuffleSplit, StratifiedKFold, learning_curve, RandomizedSearchCV\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.utils.fixes import loguniform\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import roc_curve, auc, roc_auc_score\n",
        "from collections import Counter\n",
        "\n",
        "# Statistics\n",
        "from statistics import mean"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xxnxLcUpCSKk",
        "colab_type": "text"
      },
      "source": [
        "# Some functions we will use "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "-NE_fTbKGe5z",
        "colab": {}
      },
      "source": [
        "def removezeros(X):\n",
        "  '''\n",
        "  Remove features with only zero's as values\n",
        "  '''\n",
        "  X_nozeros = X.loc[:, (X != 0).any(axis=0)]\n",
        "  return X_nozeros\n",
        "\n",
        "\n",
        "def most_frequent(List): \n",
        "    counter = 0\n",
        "    num = List[0] \n",
        "      \n",
        "    for i in List: \n",
        "        curr_frequency = List.count(i) \n",
        "        if(curr_frequency> counter): \n",
        "            counter = curr_frequency \n",
        "            num = i \n",
        "    return num \n",
        "\n",
        "def plot_learning_curve(estimator, title, X, y, axes=None, ylim=None, cv=None,\n",
        "                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n",
        "    \"\"\"\n",
        "    Generate 3 plots: the test and training learning curve, the training\n",
        "    samples vs fit times curve, the fit times vs score curve.\n",
        "\n",
        "    Parameters\n",
        "    ----------\n",
        "    estimator : object type that implements the \"fit\" and \"predict\" methods\n",
        "        An object of that type which is cloned for each validation.\n",
        "\n",
        "    title : string\n",
        "        Title for the chart.\n",
        "\n",
        "    X : array-like, shape (n_samples, n_features)\n",
        "        Training vector, where n_samples is the number of samples and\n",
        "        n_features is the number of features.\n",
        "\n",
        "    y : array-like, shape (n_samples) or (n_samples, n_features), optional\n",
        "        Target relative to X for classification or regression;\n",
        "        None for unsupervised learning.\n",
        "\n",
        "    axes : array of 3 axes, optional (default=None)\n",
        "        Axes to use for plotting the curves.\n",
        "\n",
        "    ylim : tuple, shape (ymin, ymax), optional\n",
        "        Defines minimum and maximum yvalues plotted.\n",
        "\n",
        "    cv : int, cross-validation generator or an iterable, optional\n",
        "        Determines the cross-validation splitting strategy.\n",
        "        Possible inputs for cv are:\n",
        "          - None, to use the default 5-fold cross-validation,\n",
        "          - integer, to specify the number of folds.\n",
        "          - :term:`CV splitter`,\n",
        "          - An iterable yielding (train, test) splits as arrays of indices.\n",
        "\n",
        "        For integer/None inputs, if ``y`` is binary or multiclass,\n",
        "        :class:`StratifiedKFold` used. If the estimator is not a classifier\n",
        "        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n",
        "\n",
        "        Refer :ref:`User Guide <cross_validation>` for the various\n",
        "        cross-validators that can be used here.\n",
        "\n",
        "    n_jobs : int or None, optional (default=None)\n",
        "        Number of jobs to run in parallel.\n",
        "        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n",
        "        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n",
        "        for more details.\n",
        "\n",
        "    train_sizes : array-like, shape (n_ticks,), dtype float or int\n",
        "        Relative or absolute numbers of training examples that will be used to\n",
        "        generate the learning curve. If the dtype is float, it is regarded as a\n",
        "        fraction of the maximum size of the training set (that is determined\n",
        "        by the selected validation method), i.e. it has to be within (0, 1].\n",
        "        Otherwise it is interpreted as absolute sizes of the training sets.\n",
        "        Note that for classification the number of samples usually have to\n",
        "        be big enough to contain at least one sample from each class.\n",
        "        (default: np.linspace(0.1, 1.0, 5))\n",
        "    \"\"\"\n",
        "    if axes is None:\n",
        "        _, axes = plt.subplots(1, 3, figsize=(20, 5))\n",
        "\n",
        "    axes[0].set_title(title)\n",
        "    if ylim is not None:\n",
        "        axes[0].set_ylim(*ylim)\n",
        "    axes[0].set_xlabel(\"Training examples\")\n",
        "    axes[0].set_ylabel(\"Score\")\n",
        "\n",
        "    train_sizes, train_scores, test_scores, fit_times, _ = \\\n",
        "        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,\n",
        "                       train_sizes=train_sizes,\n",
        "                       return_times=True)\n",
        "    train_scores_mean = np.mean(train_scores, axis=1)\n",
        "    train_scores_std = np.std(train_scores, axis=1)\n",
        "    test_scores_mean = np.mean(test_scores, axis=1)\n",
        "    test_scores_std = np.std(test_scores, axis=1)\n",
        "    fit_times_mean = np.mean(fit_times, axis=1)\n",
        "    fit_times_std = np.std(fit_times, axis=1)\n",
        "\n",
        "    # Plot learning curve\n",
        "    axes[0].grid()\n",
        "    axes[0].fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
        "                         train_scores_mean + train_scores_std, alpha=0.1,\n",
        "                         color=\"r\")\n",
        "    axes[0].fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
        "                         test_scores_mean + test_scores_std, alpha=0.1,\n",
        "                         color=\"g\")\n",
        "    axes[0].plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
        "                 label=\"Training score\")\n",
        "    axes[0].plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n",
        "                 label=\"Cross-validation score\")\n",
        "    axes[0].legend(loc=\"best\")\n",
        "\n",
        "    # Plot n_samples vs fit_times\n",
        "    axes[1].grid()\n",
        "    axes[1].plot(train_sizes, fit_times_mean, 'o-')\n",
        "    axes[1].fill_between(train_sizes, fit_times_mean - fit_times_std,\n",
        "                         fit_times_mean + fit_times_std, alpha=0.1)\n",
        "    axes[1].set_xlabel(\"Training examples\")\n",
        "    axes[1].set_ylabel(\"fit_times\")\n",
        "    axes[1].set_title(\"Scalability of the model\")\n",
        "\n",
        "    # Plot fit_time vs score\n",
        "    axes[2].grid()\n",
        "    axes[2].plot(fit_times_mean, test_scores_mean, 'o-')\n",
        "    axes[2].fill_between(fit_times_mean, test_scores_mean - test_scores_std,\n",
        "                         test_scores_mean + test_scores_std, alpha=0.1)\n",
        "    axes[2].set_xlabel(\"fit_times\")\n",
        "    axes[2].set_ylabel(\"Score\")\n",
        "    axes[2].set_title(\"Performance of the model\")\n",
        "\n",
        "    return plt\n",
        "\n",
        "def plot_roc_curve(y_score, y_truth):\n",
        "    '''\n",
        "    Plot an ROC curve.\n",
        "    '''\n",
        "    # Only take scores for class = 1\n",
        "    y_score = y_score[:, 1]\n",
        "    \n",
        "    # Compute ROC curve and ROC area for each class\n",
        "    fpr, tpr, _ = roc_curve(y_truth, y_score)\n",
        "    roc_auc = auc(fpr, tpr)\n",
        "    \n",
        "    # Plot the ROC curve\n",
        "    plt.figure()\n",
        "    lw = 2\n",
        "    plt.plot(fpr, tpr, color='darkorange',\n",
        "             lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n",
        "    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
        "    plt.xlim([0.0, 1.0])\n",
        "    plt.ylim([0.0, 1.05])\n",
        "    plt.xlabel('False Positive Rate')\n",
        "    plt.ylabel('True Positive Rate')\n",
        "    plt.title('Receiver operating characteristic')\n",
        "    plt.legend(loc=\"lower right\")\n",
        "    plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tv9UZegVBP4l",
        "colab_type": "text"
      },
      "source": [
        "# Data loading and preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KNvoeS4JBVwe",
        "colab_type": "code",
        "outputId": "3cb44dc0-1fc8-41f4-e7a9-6eb2d6a12d2b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "source": [
        "# Data loading functions\n",
        "from adni.load_data import load_data \n",
        "data = load_data()\n",
        "print(data.head())\n",
        "print(f'The number of samples: {len(data.index)}')\n",
        "print(f'The number of columns: {len(data.columns)}')\n",
        "\n",
        "# Creating vector of labels\n",
        "data_no_label = data.drop(columns='label')\n",
        "print(f'The number of features: {len(data_no_label.columns)}')\n",
        "x = data_no_label\n",
        "y = data['label']\n",
        "\n",
        "# Check if there are NaN's\n",
        "x_nan = np.isnan(x.values)\n",
        "print(f'The number of found NaN is: {np.sum(x_nan)}')\n",
        "\n",
        "# Remove features with only zero's as values\n",
        "x_df = removezeros(x)\n",
        "print(f'The number of features after removing zero-features: {len(x_df.columns)}')\n",
        "\n",
        "# Get values of of the features\n",
        "x = x_df.values\n",
        "\n",
        "# Binarize the labels\n",
        "y_bin = label_binarize(y,['AD','CN'])\n",
        "y_bin = [i[0] for i in y_bin]\n",
        "y_bin = np.array(y_bin)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                     hf_energy  ...  vf_Frangi_inner_std_SR(1.0, 10.0)_SS2.0\n",
            "ID                              ...                                         \n",
            "0_002_S_0413_bl_0  5403.229408  ...                             4.207831e-10\n",
            "0_002_S_0559_bl_0   922.459760  ...                             3.137258e-10\n",
            "0_002_S_0619_bl_0  1674.765276  ...                             4.219847e-10\n",
            "0_002_S_0685_bl_0  3443.797200  ...                             5.954654e-11\n",
            "0_002_S_0816_bl_0   914.469846  ...                             4.174750e-10\n",
            "\n",
            "[5 rows x 268 columns]\n",
            "The number of samples: 855\n",
            "The number of columns: 268\n",
            "The number of features: 267\n",
            "The number of found NaN is: 0\n",
            "The number of features after removing zero-features: 263\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x7fHSRBzB9Xx",
        "colab_type": "text"
      },
      "source": [
        "# Feature selection with RFECV "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f1SxhAqpCAsq",
        "colab_type": "code",
        "outputId": "72fbf573-0eed-4687-96ee-4b2edaed6f11",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        }
      },
      "source": [
        "#For now use 1 iteration (n_splits=1) to test RFECV method\n",
        "sss = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=0)\n",
        "for train_index, test_index in sss.split(x, y_bin):\n",
        "    \n",
        "    X_train = x[train_index]\n",
        "    y_train = y_bin[train_index]\n",
        "    X_test = x[test_index]\n",
        "    y_test = y_bin[test_index]\n",
        "\n",
        "    # Scaling of features\n",
        "    scaler = StandardScaler()   #Can be changed to RobustScaler()\n",
        "    scaler.fit(X_train)\n",
        "    X_train_scaled = scaler.transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    #Create the RFE object and compute a cross-validated score.\n",
        "    svc = SVC(kernel=\"linear\")\n",
        "    # The \\\"accuracy\\\" scoring is proportional to the number of correct classifications\n",
        "    rfecv = RFECV(estimator=svc, step=1, cv=StratifiedKFold(2),\n",
        "            scoring='roc_auc')\n",
        "    select = rfecv.fit(X_train_scaled, y_train)\n",
        "    \n",
        "    # Plot number of features VS. cross-validation scores\n",
        "    plt.figure()\n",
        "    plt.xlabel(\"Number of features selected\")\n",
        "    plt.ylabel(\"Cross validation score (nb of correct classifications)\")\n",
        "    plt.plot(range(1, len(rfecv.grid_scores_) + 1), rfecv.grid_scores_)\n",
        "    plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nvkVERgip8dH885a5lNU0ceX/fUizv43U+Ci+eEo+v397C0/deCJnjM9i9s8WcvbEIdx3xbQw/5fp\nXZX1zazfW82MvFRiI338Y/lufvjP9TS3tjEmK4Hy2mZa/W3UNfuZPiKVuWMzSImL4qPt+1mytZyk\n2Ej21zXTpnB8bgqF++uprG857H1GpMcxbkgSUT5hyZZy6pr9AGQkRJOWEI2/TYn2RZCeEE10ZARt\nqhTur6espon6Zj/RvogjlmTOOW4IP7l0yie6/2NZMCjwAmuAZ4G/q+o2oOkTRXK4a4AnVfU3InIK\nME9EpuDMFPtbVa3t6teMqj4KPArOinI9FJMxvSLP7cnU2qbsrWygcH89t50zrr2H07ghiUzOSWZ8\ndhJfPW0UF/1+CUu2llNZ38zPF2zkvEnZ/Ory47nhyY95fnkR4KyhfdywZN52q6nm33Iqw1PjSImP\nYnhqHP++8wxeWrGHcydnMyozgSfe38G/Vu9l6vAUymubu2yjGKhS46OZG9RofdUJecwdm0ltUysT\nspOYv3ovd7+4lhvm5PPiiiLW7qnC36YkRPv4/Oxc/G1KdnIsJ+Snc/LojPaEU9fUSk1TKy3+Ns4Y\nn0Vu2sHeYeW1TSzaWEpFXTM7y+uoamgh0hdBY4ufyvpm6utbUZwS0NDkWNIToqluaKG8trnTexgb\nos/NaxXTZ4CrgOdEpA1nZbnnVLWwi2v2ACOCtnPdfcG+ApwPoKofikgskIkzc+wVInIfTgN2m4g0\nquofPMZrTJ8XSBBzxmRw0+mjaWj2c0HQGAQR4V+3nEpEhKCqZCbG8Md3trG9vI6Lpg7jwWtmEBEh\nPHDVdFbuPsB3nlvNwoISKutbeHnVXkZnJTApJ/mQ98xNiz+kofjTk4fyr9V72VZWCxycknywC/4y\nv3T6cC4+3mmT+MFFx+EToaKumejIiE4btzMSYzjd7cF1JJmJMe1rnPdlnhKEqu4C7gPuE5FxwA+B\nX+H0PDqSj4FxIjIKJzFcDVzb4ZxC4FPAkyJyHM4YizJVPS1wgojci1PFZMnBDCg5qXFcOTuXa08a\nyfQRnQ+WC8zTJCKcOjaDl1c5A8z+9/PT2o/lZyaQn5nA0x/u4v/e2cb9CzcD8M2zxnQbw/fOn0BJ\ndSPvby3n55+byqyRliA643P/Wwe6M3tttO7vjmag3EicUsRVgB/4Xlfnq2qriNwCvIGTSB5X1fUi\n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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8suSwc0PVhUA",
        "colab_type": "text"
      },
      "source": [
        "#Plot explained variance for choosing a number of components for PCA\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "StU9O5_FVoUj",
        "colab_type": "code",
        "outputId": "64fa1146-81c9-4b95-f5ea-5ae3dd502f09",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "source": [
        "sss = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=0)\n",
        "for train_index, test_index in sss.split(x, y_bin):\n",
        "    \n",
        "    X_train = x[train_index]\n",
        "    y_train = y_bin[train_index]\n",
        "    X_test = x[test_index]\n",
        "    y_test = y_bin[test_index]\n",
        "\n",
        "    # Scaling of features\n",
        "    scaler = StandardScaler()\n",
        "    scaler.fit(X_train)\n",
        "    X_train_scaled = scaler.transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    \n",
        "    # PCA\n",
        "    pca = PCA().fit(X_train_scaled)\n",
        "    plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
        "    plt.xlabel('number of components')\n",
        "    plt.ylabel('cumulative explained variance')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nBCIiKff/Ad/97M002cX/AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kOGfsK0kDxS7",
        "colab_type": "text"
      },
      "source": [
        "# RF with L1 feature selection"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z2qjSfewEstQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Outer cross-validation, use 100 random splits in which class balance is retained\n",
        "sss = StratifiedShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n",
        "train_auc_scores = []\n",
        "test_auc_scores = []\n",
        "train_accuracy_scores = []\n",
        "test_accuracy_scores = []\n",
        "best_estimator = []\n",
        "\n",
        "for train_index, test_index in sss.split(x, y_bin):\n",
        "    \n",
        "    X_train = x[train_index]\n",
        "    y_train = y_bin[train_index]\n",
        "    X_test = x[test_index]\n",
        "    y_test = y_bin[test_index]\n",
        "\n",
        "    # Scaling of features\n",
        "    scaler = StandardScaler()   # RobustScaler() can also be applied \n",
        "    scaler.fit(X_train)\n",
        "    X_train_scaled = scaler.transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    # Feature selection - L1 method\n",
        "    selector = SelectFromModel(estimator=Lasso(alpha=10**(-10), random_state=42), threshold='median')\n",
        "    selector.fit(X_train_scaled, y_train)\n",
        "    n_original = X_train_scaled.shape[1]\n",
        "    X_train = selector.transform(X_train_scaled)\n",
        "    X_test = selector.transform(X_test_scaled)\n",
        "    n_selected = X_train.shape[1]\n",
        "    print(f\"Selected {n_selected} from {n_original} features with L1 method.\")\n",
        "    \n",
        "    # Define hyperparameters for RF\n",
        "    forest_parameters = {'n_estimators': list(range(50,301)), \n",
        "                      'criterion':  ['gini', 'entropy'],\n",
        "                      'max_depth': [4, 5, 6, 7, 8, 9, 10],\n",
        "                      'max_features': ['auto','sqrt','log2']}\n",
        "\n",
        "    # Perform randomized search with cross-validation for hyperparameter optimization\n",
        "    cv_5fold = StratifiedKFold(n_splits=5)\n",
        "    grid = RandomizedSearchCV(RandomForestClassifier(), forest_parameters, cv=cv_5fold, refit = True, verbose = 3, random_state=42) \n",
        "    grid.fit(X_train, y_train)\n",
        "\n",
        "    print(\"The best classifier is: \", grid.best_estimator_)\n",
        "    best_estimator.append(grid.best_estimator_)\n",
        "\n",
        "    # Determine scores for train and test set\n",
        "    score_train_auc = grid.best_estimator_.predict_proba(X_train)\n",
        "    score_test_auc = grid.best_estimator_.predict_proba(X_test)\n",
        "    score_train_acc = grid.best_estimator_.score(X_train,y_train)\n",
        "    score_test_acc = grid.best_estimator_.score(X_test,y_test)\n",
        "\n",
        "    # Plot ROC curve for train and test set\n",
        "    plot_roc_curve(score_train_auc, y_train)\n",
        "    plot_roc_curve(score_test_auc, y_test)\n",
        "\n",
        "    score_train_auc_1 = score_train_auc[:, 1]\n",
        "    score_train_auc_final = roc_auc_score(y_train,score_train_auc_1)\n",
        "    score_test_auc_1 = score_test_auc[:, 1]\n",
        "    score_test_auc_final = roc_auc_score(y_test,score_test_auc_1)\n",
        "\n",
        "    train_auc_scores.append(score_train_auc_final)\n",
        "    test_auc_scores.append(score_test_auc_final)\n",
        "    train_accuracy_scores.append(score_train_acc)\n",
        "    test_accuracy_scores.append(score_test_acc)\n",
        "\n",
        "best_estimator_hyperparams = most_frequent(best_estimator)\n",
        "\n",
        "\"\"\"\n",
        "# Create numpy array of scores and calculate the mean and std\n",
        "all_train_auc = np.array(train_auc_scores)\n",
        "all_test_auc = np.array(test_auc_scores)\n",
        "\n",
        "all_train_accuracy = np.array(train_accuracy_scores)\n",
        "all_test_accuracy = np.array(test_accuracy_scores)\n",
        "\n",
        "train_scores_auc_mean = all_train_auc.mean(axis=0)\n",
        "train_scores_auc_std = all_train_auc.std(axis=0)\n",
        "\n",
        "train_scores_accuracy_mean = all_train_accuracy.mean(axis=0)\n",
        "train_scores_accuracy_std = all_train_accuracy.std(axis=0)\n",
        "\n",
        "test_scores_auc_mean = all_test_auc.mean(axis=0)\n",
        "test_scores_auc_std = all_test_auc.std(axis=0)\n",
        "\n",
        "test_scores_accuracy_mean = all_test_accuracy.mean(axis=0)\n",
        "test_scores_accuracy_std = all_test_accuracy.std(axis=0)\n",
        "\n",
        "print(f'mean train auc-score is {train_scores_auc_mean}')\n",
        "print(f'mean test auc-score is {test_scores_auc_mean}')\n",
        "print(f'mean train accuracy-score is {train_scores_accuracy_mean}')\n",
        "print(f'mean test accuracy-score is {test_scores_accuracy_mean}')\n",
        "\"\"\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ENu-Ubd0D2Ws",
        "colab_type": "text"
      },
      "source": [
        "# RF with PCA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_aZ9sPcbE0F8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Outer cross-validation, use 100 random splits in which class balance is retained\n",
        "sss = StratifiedShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n",
        "train_auc_scores = []\n",
        "test_auc_scores = []\n",
        "train_accuracy_scores = []\n",
        "test_accuracy_scores = []\n",
        "best_estimator = []\n",
        "\n",
        "for train_index, test_index in sss.split(x, y_bin):\n",
        "    \n",
        "    X_train = x[train_index]\n",
        "    y_train = y_bin[train_index]\n",
        "    X_test = x[test_index]\n",
        "    y_test = y_bin[test_index]\n",
        "\n",
        "    # Scaling of features\n",
        "    scaler = StandardScaler()   # RobustScaler() can also be applied \n",
        "    scaler.fit(X_train)\n",
        "    X_train_scaled = scaler.transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    #PCA\n",
        "    pca = PCA(n_components=100)\n",
        "    pca = pca.fit(X_train_scaled)\n",
        "    X_train = pca.transform(X_train_scaled)\n",
        "    X_test = pca.transform(X_test_scaled)\n",
        "    \n",
        "    # Define hyperparameters for RF\n",
        "    forest_parameters = {'n_estimators': list(range(50,301)), \n",
        "                      'criterion':  ['gini', 'entropy'],\n",
        "                      'max_depth': [4, 5, 6, 7, 8, 9, 10],\n",
        "                      'max_features': ['auto','sqrt','log2']}\n",
        "\n",
        "    # Perform randomized search with cross-validation for hyperparameter optimization\n",
        "    cv_5fold = StratifiedKFold(n_splits=5)\n",
        "    grid = RandomizedSearchCV(RandomForestClassifier(), forest_parameters, cv=cv_5fold, refit = True, verbose = 3, random_state=42) \n",
        "    grid.fit(X_train, y_train)\n",
        "\n",
        "    print(\"The best classifier is: \", grid.best_estimator_)\n",
        "    best_estimator.append(grid.best_estimator_)\n",
        "\n",
        "    # Determine scores for train and test set\n",
        "    score_train_auc = grid.best_estimator_.predict_proba(X_train)\n",
        "    score_test_auc = grid.best_estimator_.predict_proba(X_test)\n",
        "    score_train_acc = grid.best_estimator_.score(X_train,y_train)\n",
        "    score_test_acc = grid.best_estimator_.score(X_test,y_test)\n",
        "\n",
        "    # Plot ROC curve for train and test set\n",
        "    plot_roc_curve(score_train_auc, y_train)\n",
        "    plot_roc_curve(score_test_auc, y_test)\n",
        "\n",
        "    score_train_auc_1 = score_train_auc[:, 1]\n",
        "    score_train_auc_final = roc_auc_score(y_train,score_train_auc_1)\n",
        "    score_test_auc_1 = score_test_auc[:, 1]\n",
        "    score_test_auc_final = roc_auc_score(y_test,score_test_auc_1)\n",
        "\n",
        "    train_auc_scores.append(score_train_auc_final)\n",
        "    test_auc_scores.append(score_test_auc_final)\n",
        "    train_accuracy_scores.append(score_train_acc)\n",
        "    test_accuracy_scores.append(score_test_acc)\n",
        "\n",
        "best_estimator_hyperparams = most_frequent(best_estimator)\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "# Create numpy array of scores and calculate the mean and std\n",
        "all_train_auc = np.array(train_auc_scores)\n",
        "all_test_auc = np.array(test_auc_scores)\n",
        "\n",
        "all_train_accuracy = np.array(train_accuracy_scores)\n",
        "all_test_accuracy = np.array(test_accuracy_scores)\n",
        "\n",
        "train_scores_auc_mean = all_train_auc.mean(axis=0)\n",
        "train_scores_auc_std = all_train_auc.std(axis=0)\n",
        "\n",
        "train_scores_accuracy_mean = all_train_accuracy.mean(axis=0)\n",
        "train_scores_accuracy_std = all_train_accuracy.std(axis=0)\n",
        "\n",
        "test_scores_auc_mean = all_test_auc.mean(axis=0)\n",
        "test_scores_auc_std = all_test_auc.std(axis=0)\n",
        "\n",
        "test_scores_accuracy_mean = all_test_accuracy.mean(axis=0)\n",
        "test_scores_accuracy_std = all_test_accuracy.std(axis=0)\n",
        "\n",
        "print(f'mean train auc-score is {train_scores_auc_mean}')\n",
        "print(f'mean test auc-score is {test_scores_auc_mean}')\n",
        "print(f'mean train accuracy-score is {train_scores_accuracy_mean}')\n",
        "print(f'mean test accuracy-score is {test_scores_accuracy_mean}')\n",
        "\"\"\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f0DCNK0GEEGs",
        "colab_type": "text"
      },
      "source": [
        "# kNN with L1 feature selection"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GmDqy2O2EWGk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Outer cross-validation, use 100 random splits in which class balance is retained\n",
        "sss = StratifiedShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n",
        "train_auc_scores = []\n",
        "test_auc_scores = []\n",
        "train_accuracy_scores = []\n",
        "test_accuracy_scores = []\n",
        "best_estimator = []\n",
        "\n",
        "for train_index, test_index in sss.split(x, y_bin):\n",
        "    \n",
        "    X_train = x[train_index]\n",
        "    y_train = y_bin[train_index]\n",
        "    X_test = x[test_index]\n",
        "    y_test = y_bin[test_index]\n",
        "\n",
        "    # Scaling of features\n",
        "    scaler = StandardScaler()   # RobustScaler() can also be applied \n",
        "    scaler.fit(X_train)\n",
        "    X_train_scaled = scaler.transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    # Feature selection - L1 method\n",
        "    selector = SelectFromModel(estimator=Lasso(alpha=10**(-10), random_state=42), threshold='median')\n",
        "    selector.fit(X_train_scaled, y_train)\n",
        "    n_original = X_train_scaled.shape[1]\n",
        "    X_train = selector.transform(X_train_scaled)\n",
        "    X_test = selector.transform(X_test_scaled)\n",
        "    n_selected = X_train.shape[1]\n",
        "    print(f\"Selected {n_selected} from {n_original} features with L1 method.\")\n",
        "    \n",
        "    # Define hyperparameters for kNN\n",
        "    kNN_parameters = {'n_neighbors': list(range(1,101)), \n",
        "                      'weights':  ['uniform', 'distance'],\n",
        "                      'metric': ['euclidean', 'manhattan']}\n",
        "\n",
        "    # Perform randomized search with cross-validation for hyperparameter optimization\n",
        "    cv_5fold = StratifiedKFold(n_splits=5) \n",
        "    grid = RandomizedSearchCV(KNeighborsClassifier(), kNN_parameters, cv=cv_5fold, refit = True, verbose = 3, random_state=42) \n",
        "    grid.fit(X_train, y_train)\n",
        "\n",
        "    print(\"The best classifier is: \", grid.best_estimator_)\n",
        "    best_estimator.append(grid.best_estimator_)\n",
        "\n",
        "    # Determine scores for train and test set\n",
        "    score_train_auc = grid.best_estimator_.predict_proba(X_train)\n",
        "    score_test_auc = grid.best_estimator_.predict_proba(X_test)\n",
        "    score_train_acc = grid.best_estimator_.score(X_train,y_train)\n",
        "    score_test_acc = grid.best_estimator_.score(X_test,y_test)\n",
        "\n",
        "    # Plot ROC curve for train and test set\n",
        "    plot_roc_curve(score_train_auc, y_train)\n",
        "    plot_roc_curve(score_test_auc, y_test)\n",
        "\n",
        "    score_train_auc_1 = score_train_auc[:, 1]\n",
        "    score_train_auc_final = roc_auc_score(y_train,score_train_auc_1)\n",
        "    score_test_auc_1 = score_test_auc[:, 1]\n",
        "    score_test_auc_final = roc_auc_score(y_test,score_test_auc_1)\n",
        "\n",
        "    train_auc_scores.append(score_train_auc_final)\n",
        "    test_auc_scores.append(score_test_auc_final)\n",
        "    train_accuracy_scores.append(score_train_acc)\n",
        "    test_accuracy_scores.append(score_test_acc)\n",
        "\n",
        "\n",
        "best_estimator_hyperparams = most_frequent(best_estimator)\n",
        "\n",
        "\n",
        "\"\"\"\n",
        "# Create numpy array of scores and calculate the mean and std\n",
        "all_train_auc = np.array(train_auc_scores)\n",
        "all_test_auc = np.array(test_auc_scores)\n",
        "\n",
        "all_train_accuracy = np.array(train_accuracy_scores)\n",
        "all_test_accuracy = np.array(test_accuracy_scores)\n",
        "\n",
        "train_scores_auc_mean = all_train_auc.mean(axis=0)\n",
        "train_scores_auc_std = all_train_auc.std(axis=0)\n",
        "\n",
        "train_scores_accuracy_mean = all_train_accuracy.mean(axis=0)\n",
        "train_scores_accuracy_std = all_train_accuracy.std(axis=0)\n",
        "\n",
        "test_scores_auc_mean = all_test_auc.mean(axis=0)\n",
        "test_scores_auc_std = all_test_auc.std(axis=0)\n",
        "\n",
        "test_scores_accuracy_mean = all_test_accuracy.mean(axis=0)\n",
        "test_scores_accuracy_std = all_test_accuracy.std(axis=0)\n",
        "\n",
        "print(f'mean train auc-score is {train_scores_auc_mean}')\n",
        "print(f'mean test auc-score is {test_scores_auc_mean}')\n",
        "print(f'mean train accuracy-score is {train_scores_accuracy_mean}')\n",
        "print(f'mean test accuracy-score is {test_scores_accuracy_mean}')\n",
        "\"\"\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N0vCxUs3XOjr",
        "colab_type": "text"
      },
      "source": [
        "Learning Curve\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HsjYajF9XJkK",
        "colab_type": "code",
        "outputId": "11bf76df-f239-4ebb-a7c6-773b157b6e53",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 894
        }
      },
      "source": [
        "# Create a cross-validation object\n",
        "cv_lc = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\n",
        "\n",
        "# Now use the classifiers on all datasets to plot the learning curve\n",
        "fig, axes = plt.subplots(3, 2, figsize=(10, 15))\n",
        "title = str(type(best_estimator_hyperparams))\n",
        "plot_learning_curve(best_estimator_hyperparams, title, x, y_bin, axes=axes[:, 1], ylim=(0.7, 1.01),\n",
        "                    cv=cv_lc, n_jobs=4)\n",
        "plt.show()"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAApQAAANtCAYAAAAuJetZAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nOzdeZyVdfn/8debAcEFxUBJRVmMVGQZ\ncAKXqHFJTUuyMkFcs9ByqSz9afUtsyyzzLRNscwlinCN0m8uyXzVFBUUUVwRUcElREHAZJm5fn/c\n94yHw5mZA+fMnJvh/Xw8zmPu/b4+932f+1zz+dyLIgIzMzMzsw3VqdIBmJmZmdnGzQmlmZmZmZXE\nCaWZmZmZlcQJpZmZmZmVxAmlmZmZmZXECaWZmZmZlcQJpZm1O0knSrq/0nHkklQracH6jtuYSJoj\nqbbIaedLOqiZcRvN9pBUJ+lLbbTsXSQtl1SV9veWdK+kZZIukfRtSb9vg/WOl3RnuZfb1tYn7tbO\nEW25X9eHpH6SQlLnNlr+WseQpCMlvZIed8PX5zvd1pxQmlmHlyZH/SodR6VFxJ4RUVfpODqKiHg5\nIraKiPp00ATgTWDriPhmRPw4IkpKegolLBExKSIOLmW5zaxrrSRO0taS/i3pJkmbSbomjWVkzjQf\nklTUA63bKu62JunDkm6Q9KakpZJmSzqr8R+JtlTgGPo5cHp63D1Wync6PbbmlyNOcEJpZmUmqXel\nY9hYtFWtxsakg22DvsBT0QHeGCJpW+BfwEvA0RGxKh31FvCjigVWZq0df5J2BR4CXgGGRMQ2wFFA\nDdC97SNcR19gTqkLKVTuUs/dTijNrGSSekj6iqSHgWtyhu8s6WZJiyQtlvTrZua/LG3GeUfSTEmj\nc8aNlDQjHfeGpF+kw7tJ+lO63CWSHinmhCjpMElPpc2SCyV9q5npzkyn61Ng3I5prc0iSS9KOjMv\n3gfTmF6T9GtJm+WMD0mnSXoeeL6x+VjSNyX9J53npBbiny/pW2ktyVJJf5XULWf8pyTNStf/gKSh\nefMelHZvLulaSW9LelrSOVq3Gbu6ufWky/h2WmszX9L4nOHbSLou3T4vSfqupE7puBPTWq9LJS0G\nzk9ruf4vXc+bkv7aXPlb2C5j0nK/I+kFSYcWmGZXSfekx8ybkiZJ6pEz/v+lx8QySc9KOjAd3twx\n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\nmnkBw5VAXUT8Je1/luRSnlqgNiJOKTRdc4o6f/Xrl/xQ5evaFfbeu8VZlyxZQo8ePVpefjtrNqbp\n02HlynWHF1HONo2rnNazjFncf1BEXBXYlxXZVs2Vs29fmD8faPYu7zY7f3UErqE0s01Bc8/LbW74\nOnKfo9u7d2/q6upaXOHHX34ZFRgeK1ey9O2WK0DrGxpY0so07a25mLZZuXKDy9mWcZXT+pYxi/sP\nWo+rEvuyEtuq2XK+/DL/l36vly9f3up33NbmhNLMrAj5z9Ft9dl5u+xSsIZSffvS4/HHW5w1i8/m\nazamZmpiiylnm8ZVTutZxizuPygirgrsy4psq+bKucsuTbFkdR9mWTkeG2RmlnXNPS+37Z6je+GF\nsMUWaw/bYotkeEeyKZRzUygjuJwdrZztzAmlmW0Kmnte7h3AwZK2lbQtcHA6rHTjx8PEicl1WVLy\nd+LEjnfR/6ZQzk2hjOBydrRytjM3eZvZRm9Dn5cbEW9J+iHwSLqoCyLirbIFNn78pvEjtSmUc1Mo\nI7ictsGcUJrZRi8ixrUyPoDTmhl3NXB1W8RlZrapcJO3mZmZmZXECaWZmZmZlcQJpZmZmZmVxAml\nmZmZmZXECaWZmZmZlcQJpZmZmZmVxAmlmZmZmZXECaWZmZmZlcQJpZmZmZmVxAmlmZmZmZXECaWZ\nmZmZlcQJpZmZmZmVxAmlmZmZmZXECaWZmZmZlcQJpZmZmZmVxAmlmZmZmZXECaWZmZmZlcQJpZmZ\nmZmVxAmlmZmZmZXECaWZmZmZlcQJpZmZmZmVxAmlmZmZmZXECaWZmZmZlcQJpZmZmZmVxAmlmZmZ\nmZXECaWZmZmZlcQJpZmZmZmVxAmlmZmZmZXECaWZmZmZlcQJpZmZmZmVxAmlmXUIkg6V9KykuZLO\nLTC+r6R/SZotqU5Sn5xx9ZJmpZ+p7Ru5mdnGr6iEsogT9S6Spkl6LD1ZH1b+UM3MCpNUBfwG+CQw\nCBgnaVDeZD8HrouIocAFwE9yxv03IqrTzxHtErSZWQfSakJZ5In6u8CUiBgOjAV+W+5AzcxaMBKY\nGxHzImIVMBkYkzfNIOCetHtagfFmZraBOhcxTdOJGkBS44n6qZxpAtg67d4GeLWcQZqZtWIn4JWc\n/gXAqLxpHgc+C1wGHAl0l9QzIhYD3STNANYAF0XErfkrkDQBmADQu3dv6urqyl6IRsuXL2/T5W+I\nLMYE2YwrizFBNuPKYkyQ3biyrJiEspgT9fnAnZLOALYEDiq0oNwT8i677LK+sZqZleJbwK8lnQjc\nCywE6tNxfSNioaQBwD2SnoiIF3JnjoiJwESAmpqaqK2tbbNA6+rqaMvlb4gsxgTZjCuLMUE248pi\nTJDduLKsXDfljAOuiYg+wGHA9ZLWWXZETIyImoio2W677cq0ajMzFgI75/T3SYc1iYhXI+Kz6aU5\n30mHLUn/Lkz/zgPqgOHtELOZWYdRTELZ6okaOBmYAhARDwLdgF7lCNDMrAiPAAMl9Ze0Gcm13Gvd\nrS2pV84/uucBV6fDt5XUtXEaYD/WvqTHzMxaUUxC2eqJGngZOBBA0h4kCeWicgZqZtaciFgDnA7c\nATxNcpPgHEkXSGq8a7sWeFbSc0Bv4MJ0+B7ADEmPk9ysc1FEOKE0M1sPrV5DGRFrJDWeqKuAqxtP\n1MCMiJgKfBO4StI3SG7QOTEioi0DNzPLFRG3A7fnDfteTveNwI0F5nsAGNLmAZqZdWDF3JRTzIn6\nKZJmIjMzMzPbxPhNOWZmZmZWEieUZmZmZlYSJ5RmZmZmVhInlGZmZmZWEieUZmZmZlYSJ5RmZmZm\nVhInlGZmZmZWEieUZmZmZlYSJ5RmZmZmVhInlGZmZmZWEieUZmZmZlYSJ5RmZmZmVhInlGZmZmZW\nEieUZmZmZlYSJ5RmZmZmVhInlGZmZmZWEieUZmZmZlYSJ5RmZmZmVhInlGZmZmZWEieUZmZmZlYS\nJ5RmZmZmVhInlGZmZmZWEieUZmZmZlYSJ5RmZmZmVhInlGZmZmZWEieUZmZmZlYSJ5RmZmZmVhIn\nlGZmZmZWEieUZtYhSDpU0rOS5ko6t8D4vpL+JWm2pDpJfXLGnSDp+fRzQvtGbma28XNCaWYbPUlV\nwG+ATwKDgHGSBuVN9nPguogYClwA/CSd9wPA94FRwEjg+5K2ba/Yzcw6AieUZtYRjATmRsS8iFgF\nTAbG5E0zCLgn7Z6WM/4Q4K6IeCsi3gbuAg5th5jNzDoMJ5Rm1hHsBLyS078gHZbrceCzafeRQHdJ\nPYuc18zMWtC50gGYmbWTbwG/lnQicC+wEKgvdmZJE4AJAL1796aurq4NQkwsX768TZe/IbIYE2Qz\nrizGBNmMK4sxQXbjyjInlGbWESwEds7p75MOaxIRr5LWUEraCvhcRCyRtBCozZu3Ln8FETERmAhQ\nU1MTtbW1+ZOUTV1dHW25/A2RxZggm3FlMSbIZlxZjAmyG1eWucnbzDqCR4CBkvpL2gwYC0zNnUBS\nL0mN57zzgKvT7juAgyVtm96Mc3A6zMzMiuSE0sw2ehGxBjidJBF8GpgSEXMkXSDpiHSyWuBZSc8B\nvYEL03nfAn5IkpQ+AlyQDjMzsyK5ydvMOoSIuB24PW/Y93K6bwRubGbeq3m/xtLMzNaTayjNzMzM\nrCROKM3MzMysJEUllK290iyd5guSnpI0R9KfyxummZmZmWVVq9dQ5rzS7BMkD/x9RNLUiHgqZ5qB\nJHdN7hcRb0vavq0CNjMzM7NsKaaGsphXmn0Z+E362jIi4j/lDdPMzMzMsqqYhLKY15J9GPiwpH9L\nmi6p4HtwJU2QNEPSjEWLFm1YxGZmZmaWKeW6KaczMJDkOW/jgKsk9cifKCImRkRNRNRst912ZVq1\nmZmZmVVSMQllq680I6m1nBoRqyPiReA5kgTTzMzMzDq4YhLKVl9pBtxK+i5cSb1ImsDnlTFOMzMz\nM8uoVhPKIl9pdgewWNJTwDTg7IhY3FZBm5mZmVl2FPXqxSJeaRbAWenHzMzMzDYhflOOmZmZmZXE\nCaWZmZmZlcQJpZmZmZmVxAmlmZmZmZXECaWZmZmZlcQJpZmZmZmVxAmlmZmZmZXECaWZZY6kzSXt\nVuk4zMysOE4ozSxTJH0amAX8M+2vlpT/ulczM8sQJ5RmljXnAyOBJQARMQvoX8mAzMysZU4ozSxr\nVkfE0rxhUZFIzMysKEW9y9vMrB3NkXQMUCVpIHAm8ECFYzIzsxa4htLMsuYMYE9gJfBnYCnw9YpG\nZGZmLXINpZllhqQq4LaI2B/4TqXjMTOz4riG0swyIyLqgQZJ21Q6FjMzK55rKM0sa5YDT0i6C1jR\nODAizqxcSGZm1hInlGaWNTenHzMz20g4oTSzTImIayVtBnw4HfRsRKyuZExmZtYyJ5RmlimSaoFr\ngfmAgJ0lnRAR91YyLjMza55vyjGzrLkEODgiPh4RHwMOAS5tbSZJh0p6VtJcSecWGL+LpGmSHpM0\nW9Jh6fB+kv4raVb6uaLsJTIz6+BcQ2lmWdMlIp5t7ImI5yR1aWmG9HFDvwE+ASwAHpE0NSKeypns\nu8CUiPidpEHA7UC/dNwLEVFdzkKYmW1KnFCaWdbMkPR74E9p/3hgRivzjATmRsQ8AEmTgTFAbkIZ\nwNZp9zbAq2WL2MxsE6eIyrwit6amJmbMaO03wsw6EkkzI6KmlWm6AqcBH00H3Qf8NiJWtjDP54FD\nI+JLaf9xwKiIOD1nmh2AO4FtgS2BgyJipqR+wBzgOeAd4LsRcV+BdUwAJgD07t17r8mTJxdV5g2x\nfPlyttpqqzZb/obIYkyQzbiyGBNkM64sxgSF49p///1bPX9tylxDaWZZ0xm4LCJ+AU3N2V3LsNxx\nwDURcYmkfYDrJQ0GXgN2iYjFkvYCbpW0Z0S8kztzREwEJkLyD3FtbW0ZQiqsrq6Otlz+hshiTJDN\nuLIYE2QzrizGBNmNK8t8U46ZZc2/gM1z+jcH7m5lnoXAzjn9fdJhuU4GpgBExINAN6BXRKyMiMXp\n8JnAC7z/yCIzMyuCE0ozy5puEbG8sSft3qKVeR4BBkrqnz7DciwwNW+al4EDASTtQZJQLpK0XVoL\niqQBwEBgXllKYma2iXBCaWZZs0LSiMYeSTXAf1uaISLWAKcDdwBPk9zNPUfSBZKOSCf7JvBlSY8D\nfwFOjOQi8o8BsyXNAm4ETo2It8peKjOzDszXUJpZ1nwduEFS413YOwBHtzZTRNxO8iig3GHfy+l+\nCtivwHw3ATeVErCZ2abONZRmlgmSPiLpgxHxCLA78FdgNfBP4MWKBmdmZi1yQmlmWXElsCrt3gf4\nNsnDyt8mvbvazMyyyU3eZpYVVTnXLh4NTGxsjk6vbzQzs4xyDaWZZUWVpMZ/cg8E7skZ539+zcwy\nzCdpM8uKvwD/J+lNkru67wOQ9CFgaSUDMzOzljmhNLNMiIgLJf2L5K7uO+P998J2As6oXGRmZtYa\nJ5RmlhkRMb3AsOcqEYuZmRXP11CamZmZWUmcUJqZmZlZSZxQmpmZmVlJnFCamZmZWUmKSiglHSrp\nWUlzJZ3bwnSfkxSSasoXopmZmZllWasJpaQqkteffRIYBIyTNKjAdN2BrwEPlTtIMzMzM8uuYmoo\nRwJzI2JeRKwCJgNjCkz3Q+CnwHtljM/MzMzMMq6YhHIn4JWc/gXpsCaSRgA7R8RtLS1I0gRJMyTN\nWLRo0XoHa2ZmZmbZU/JNOZI6Ab8AvtnatBExMSJqIqJmu+22K3XVZmZmZpYBxSSUC4Gdc/r7pMMa\ndQcGA3WS5gN7A1N9Y46ZmZnZpqGYhPIRYKCk/pI2A8YCUxtHRsTSiOgVEf0ioh8wHTgiIma0ScRm\nZmZmlimtJpQRsQY4HbgDeBqYEhFzJF0g6Yi2DtDMzMzMsq1zMRNFxO3A7XnDvtfMtLWlh2VmZmZm\nGwu/KcfMzMzMSuKE0szMzMxK4oTSzMzMzErihNLMzMzMSuKE0szMzMxK4oTSzMzMzErihNLMzMzM\nSuKE0szMzMxK4oTSzMzMzKhM1kIAACAASURBVErihNLMzMzMSuKE0sw6BEmHSnpW0lxJ5xYYv4uk\naZIekzRb0mE5485L53tW0iHtG7mZ2cavqHd5m5llmaQq4DfAJ4AFwCOSpkbEUzmTfReYEhG/kzQI\nuB3ol3aPBfYEdgTulvThiKhv31KYmW28XENpZh3BSGBuRMyLiFXAZGBM3jQBbJ12bwO8mnaPASZH\nxMqIeBGYmy7PzMyK5BpKM+sIdgJeyelfAIzKm+Z84E5JZwBbAgflzDs9b96d8lcgaQIwAaB3797U\n1dWVI+6Cli9f3qbL3xBZjAmyGVcWY4JsxpXFmCC7cWWZE0oz21SMA66JiEsk7QNcL2lwsTNHxERg\nIkBNTU3U1ta2TZRAXV0dbbn8DZHFmCCbcWUxJshmXFmMCbIbV5Y5oTSzjmAhsHNOf590WK6TgUMB\nIuJBSd2AXkXOa2ZmLfA1lGbWETwCDJTUX9JmJDfZTM2b5mXgQABJewDdgEXpdGMldZXUHxgIPNxu\nkZuZdQCuoTSzjV5ErJF0OnAHUAVcHRFzJF0AzIiIqcA3gaskfYPkBp0TIyKAOZKmAE8Ba4DTfIe3\nmdn6cUJpZh1CRNxO8iig3GHfy+l+CtivmXkvBC5s0wDNzDowN3mbmZmZWUmcUJqZmZlZSZxQmpmZ\nmVlJnFCamZmZWUmcUJqZmZlZSZxQmpmZmVlJnFCamZmZWUmcUJqZmZlZSZxQmpmZmVlJnFCamZmZ\nWUmcUJqZmZlZSZxQmpmZmVlJnFCamZmZWUmcUJqZmZlZSZxQmpmZmVlJnFCamZmZWUmcUJqZmZlZ\nSZxQmpmZmVlJnFCamZmZWUmcUJqZmZlZSYpKKCUdKulZSXMlnVtg/FmSnpI0W9K/JPUtf6hmZmZm\nlkWtJpSSqoDfAJ8EBgHjJA3Km+wxoCYihgI3AheXO1AzMzMzy6ZiaihHAnMjYl5ErAImA2NyJ4iI\naRHxbto7HehT3jDNzMzMLKuKSSh3Al7J6V+QDmvOycD/FhohaYKkGZJmLFq0qPgozczMzCyzynpT\njqRjgRrgZ4XGR8TEiKiJiJrtttuunKs2MzMzswrpXMQ0C4Gdc/r7pMPWIukg4DvAxyNiZXnCMzMz\nM7OsK6aG8hFgoKT+kjYDxgJTcyeQNBy4EjgiIv5T/jDNzMzMLKtaTSgjYg1wOnAH8DQwJSLmSLpA\n0hHpZD8DtgJukDRL0tRmFmdmZmZmHUwxTd5ExO3A7XnDvpfTfVCZ4zIzMzOzjYTflGNmHUIRL2C4\nNG1BmSXpOUlLcsbV54xzC4uZ2XoqqobSzCzLcl7A8AmSR5s9ImlqRDzVOE1EfCNn+jOA4TmL+G9E\nVLdXvGZmHY1rKM2sI2j1BQx5xgF/aZfIzMw2AU4ozawjKPoFDJL6Av2Be3IGd0tfujBd0mfaLkwz\ns47JTd5mtqkZC9wYEfU5w/pGxEJJA4B7JD0RES/kziRpAjABoHfv3tTV1ZE3ni233JKqqqqSA9x6\n66157LHHSl5OOWUxJshmXBsaU319PStWrCAi2iAqWL58+TrHbaVlMSbIblxZ5oTSzDqCol7AkBoL\nnJY7ICIWpn/nSaojub7yhbxpJgITAWpqaqK2tnathb744ot0796dnj17ImmDCwKwbNkyunfvXtIy\nyi2LMUE249qQmCKCxYsXs2zZMvr3798mcdXV1ZF/3FZaFmOC7MaVZW7yNrOOoNUXMABI2h3YFngw\nZ9i2krqm3b2A/YCn8udtzXvvvVeWZNI2TZLo2bMn7733XqVDMdsgrqE0s41eRKyR1PgChirg6sYX\nMAAzIqIxuRwLTI612xT3AK6U1EDyT/ZFuXeHrw8nk1YKHz+2MXNCaWYdQmsvYEj7zy8w3wPAkDYN\nzsysg3OTt5lZB7B48WKqq6uprq7mgx/8IDvttFNT/6pVq1qcd8aMGZx55pmtrmPfffctV7hm1sG4\nhtLMrBImTYLvfAdefhl22QUuvBDGj9/gxfXs2ZNZs2YBcP7557PVVlvxrW99q2n8mjVr6Ny58Cm/\npqaGmpqaVtfxwAMPbHB8bamlsplZ+3ANpZlZe5s0CSZMgJdegojk74QJyfAyOvHEEzn11FMZNWoU\n55xzDg8//DD77LMPw4cPZ9999+XZZ58FkjtaP/WpTwFJMvrFL36R2tpaBgwYwOWXX960vK222qpp\n+traWj7/+c+z++67M378+KZH3dx+++3svvvu7LXXXpx55plNy801Z84cRo4cSXV1NUOHDuX5558H\n4LrrrmPo0KEMGzaM4447DoD58+dzwAEHMHToUA488EBefvnltcq2//77c8455/DCCy9w6KGHstde\nezF69GieeeaZsm5LM2uZ/6UzMyu3r38d0trCgqZPh5Ur1x727rtw8slw1VVsXl8P+c+zrK6GX/5y\nvUNZsGABDzzwAFVVVbzzzjvcd999dO7cmbvvvptvf/vb3HTTTevM88wzzzBt2jSWLVvGbrvtxle+\n8pV1pnnssceYM2cOO+64I/vttx///ve/qamp4ZRTTuHee++lf//+jBs3rmBMV1xxBV/72tcYP348\nq1ator6+njlz5vCjH/2IBx54gF69evHWW28BcMYZZ3DCCSdwwgkncPXVV3PmmWdy6623NpXt7rvv\npkePHhx44IFcccUVDBw4kIceeoivfvWr3HPPPQXXb2bl54TSzKy95SeTrQ0vwVFHHdX0sPWlS5dy\nwgkn8PzzzyOJ1atXF5zn8MMPp2vXrnTt2pXtt9+eN954g2222WataUaOHEmfPn0AqK6uZv78+Wy1\n1VYMGDCg6TmK48aNY+LEiessf5999uHCCy9kwYIFfPazn2XgwIHcc889HHXUUfTq1QuAD3zgAwA8\n+OCD3HzzzQAcd9xxnHPOOeuUbfny5TzwwAMcddRRTeNWtsG2NLPmOaE0Myu31moS+/VLmrnz9e0L\ndXX8t4wP695yyy2buv/nf/6H/fffn1tuuYX58+c3++Dmrl27NnVXVVWxZs2aDZqmOccccwyjRo3i\ntttu47DDDuPKK68set5cjWVraGigR48eTdeQmln78zWUZmbt7cILYYst1h62xRbJ8Da0dOlSdtop\necX5NddcU/bl77bbbsybN4/58+cD8Ne//rXgdPPmzWPAgAGceeaZjBkzhtmzZ3PAAQdwww03sHjx\nYoCmJu99992XyZMnAzBp0iRGjx69zvK23npr+vfvzw033AAkb515/PHHy108M2uBE0ozs/Y2fjxM\nnJjUSErJ34kTS7rLuxjnnHMO5513HsOHD1+vGsVibb755vz2t79tujmme/fu6zSVA0yZMoXBgwdT\nXV3Nk08+yfHHH8+ee+7Jd77zHT7+8Y8zbNgwzjrrLAB+9atf8cc//pGhQ4dy/fXXc9lllxVc96RJ\nk/jDH/7AsGHD2HPPPfnb3/5W9vKZWfPUVi+hb01NTU3MmDGjIus2s8qQNDMiWn8+TcYVOn89/fTT\n7LHHHmVZ/sb8furly5ez1VZbERGcdtppDBw4kG984xsVj6s9lRJTOY+jfFl8P3UWY4LCcXWU81db\ncQ2lmZmVzVVXXUV1dTV77rknS5cu5ZRTTql0SGbWDnxTjpmZlc03vvGNNq2RNLNscg2lmZmZmZXE\nCaWZmZmZlcQJpZmZmZmVxAmlmZmZmZXECaWZWQfx+uuvM3bsWHbddVf22msvDjvsMJ577rlKh7WO\na665htNPPx1I3ut93XXXrTPN/PnzGTx4cIvLmT9/PlOmTGnqnzFjBmeeeWZ5gzWzojihNDOrgElP\nTKLfL/vR6Qed6PfLfkx6YlJJy4sIjjzySGpra3nhhReYOXMmP/nJT3jjjTfWmq4tHmheilNPPZXj\njz9+g+adP39+09txAGpqarj88svLFVrZZG2bm7UFJ5RmZu1s0hOTmPD3Cby09CWC4KWlLzHh7xNK\nSiqnTZtGly5dOPXUU5uGDRs2jNGjR1NXV8fo0aM54ogjGDRoEO+99x4nnXQSQ4YMYfjw4UybNg2A\nOXPmMHLkSKqrqxk6dCjPP/88K1as4PDDD2ffffdl8ODB67xOsaGhgX79+rFkyZKmYQMHDuSNN97g\n73//O6NGjWL48OEcdNBB6yS3AOeffz4///nPAZg5cybDhg1j2LBh/OY3v2maZv78+YwePZoRI0Yw\nYsQIHnjgAQDOPfdcHnzwQaqrq7n00kupq6vjU5/6FJC8uvEzn/kMQ4cOZe+992b27NlN6/viF79I\nbW0tAwYMKJiA1tfXc+KJJzJ48GCGDBnCpZdeCsDcuXM56KCDGDZsGCNGjOCFF14gIjj77LObpm3c\nPvnbvL6+nrPPPpuPfOQjDB06dIPfX26WVX4OpZlZmX39n19n1uuzmh0/fcF0VtavXGvYu6vf5eS/\nncxVM6+ivr6eqqqqtcZXf7CaXx76y2aX+eSTT7LXXns1O/7RRx/lySefpH///lxyySVI4oknnuCZ\nZ57h4IMP5rnnnuOKK67ga1/7GuPHj2fVqlXU19dz++23s+OOOzJ58mS6d+/O0qVL11pup06dGDNm\nDLfccgsnnXQSDz30EH379qV379589KMfZfr06Uji97//PRdffDGXXHJJszGedNJJ/PrXv+ZjH/sY\nZ599dtPw7bffnrvuuotu3brx/PPPM27cOGbMmMFFF13ERRddxD//+U8gSeIaff/732f48OHceuut\n3HPPPRx//PHMmpXsk2eeeYZp06axbNkydtttN77yla/QpUuXpnlnzZrFwoULefLJJwGakuXx48dz\n7rnncuSRR/Lee+/R0NDAzTffzKxZs3j88cd58803+chHPsKIESPW2eYTJ05km2224ZFHHmHlypXs\nt99+HHzwwfTv37/Z7WG2MXENpZlZO8tPJlsbXg4jR45sSl7uv/9+jj32WAB23313+vbty3PPPcc+\n++zDj3/8Y37605/y0ksvsfnmmzNkyBDuuusuvve973HfffcVfDf30Ucf3VQzN3nyZI4++mgAFixY\nwCGHHMKQIUP42c9+xpw5c5qNb8mSJSxZsoSPfexjABx33HFN41avXs2Xv/xlhgwZwlFHHcVTTz3V\nannvv//+pmUccMABLF68mHfeeQeAww8/nK5du9KrVy+23377dWpOBwwYwLx58zjjjDP45z//ydZb\nb82yZctYuHAhRx55JADdunVjiy224P7772fcuHFUVVXRu3dvPv7xj/Poo4+us83vvPNOrrvuOqqr\nqxk1ahSLFy/m+eefb7UcZhsL11CamZVZSzWJAP1+2Y+Xlr60zvC+2/Sl7sS6DXoX9J577smNN97Y\n7Pgtt9yy1WUcc8wxjBo1ittuu43DDjuMK6+8kgMOOIBHH32Um266ie9+97sceOCBHHLIIU2vVLzg\nggv49Kc/zdy5c1m0aBG33nor3/3udwE444wzOOusszjiiCOoq6vj/PPPX68yNbr00kvp3bs3jz/+\nOA0NDXTr1m2DltOoa9euTd1VVVXrXOO47bbb8vjjj3PHHXdwxRVXMGXKFC677LL1Xk/uNo8IfvWr\nX3HIIYdseOBmGeYaSjOzdnbhgReyRZct1hq2RZctuPDACzd4mQcccAArV65k4sSJTcNmz57Nfffd\nt860o0ePZtKk5HrN5557jpdffpnddtuNefPmMWDAAM4880zGjBnD7NmzefXVV9liiy0YO3YsZ599\nNo8++iijRo1i1qxZzJo1iyOOOAJJHHnkkZx11lnsscce9OzZE4ClS5ey0047AXDttde2GH+PHj3o\n0aMH999/P0BTfI3L2WGHHejUqRPXX3899fX1AHTv3p3ly5cXXF5uGevq6ujVqxdbb711UdvyzTff\npKGhgc997nP86Ec/4tFHH6V79+706dOHW2+9FYCVK1fy7rvvMnr0aP76179SX1/PokWLuPfeewte\n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\npgVr2FIfZZ/BESBz3+Qlx0/iwmPHEypQsldZHmZogRJV6R1KKEVEREqMe9er4TyydDNXz19BNFin\ncltjHIAL3zGei46bkO8Q31QdCTNEC5b3e7rjVUREpMQ0xJKkujjUfdOCNW8mk9keW7YlX2G9RchM\nyWSJUA+liIhICYklU7TEU10+bkt9tEvbe8KAmqpyNPemdKiHUkREpESk0059S/eWCBo+KNLu9pE1\nlT0J6S3MoLY6QmW5FiwvJeqhFBERKREN0SRp7/qs7h1NcRKpt/ZqVpaFuGT2gfkIDcgMcQ+r1hqT\npUg/URERkRIQTaSIJrs+1J1Mp/nOg0uJJZ3PHD+RUTWVGDCqppLLT5nCnOn75yW+cMgYPiiiZLJE\nqYdSRESkn0unuz6ru9WNj6/m+fU7ueK0qZx62P584rj89Ui2Kg+HqK0q14LlJUwJpYiISD9XH03Q\njZFu/rJ8C3c89yrnHDWWUw/LT09kW5VlYWqqyrRgeYlTQikiItKPtcRTxNpZ7qczq95o5MqHl3PY\n2KF86cTJBYgMqiJharQs0ICghFJERKSfSqWdhm4MdTdEE3zzviUMipRx9VkzKC/AfY2DK8oYVKE0\nY6DQnbEiUhLMbI6ZrTSzVWZ2WTv7K8zsrmD/c2Y2Idh+tJm9GPz5t5md2duxi3RXfUuCro50p925\n4k/L2Lw7ytVnzWDE4Iq8xmTA0KpyJZMDjBJKEen3zCwM3AicDEwFzjezqW2afRLY6e4HAdcB1wTb\nlwKz3P0IYA7wazPTN6EUvaZYkniq60Pdt/xjLU+v3s5X3ncwhx9Qm9eYDBhaXa41JgcgJZQiUgqO\nBla5+xp3jwN3AnPbtJkL3BY8vhc4wczM3ZvdvXUl6ErocoePSK9LptI0xbq+gPk/XtnKb/+5llNn\n7M/ZR47Ja0xmMGxQhIoyJZMDkf4XLiKlYAzwWtbzDcAxHbVx96SZ7Qb2AbaZ2THArcB44KNZCeab\nzOxi4GKAkSNHsmDBgny/hjc1NjYW9PzdUYwxQXHG1RsxpdLe5f/5rN/WyH/9fQnjhhin7reLpc8/\nm9eYyrqxJFAx/vygeOMqZkooRWTAc/fngGlmdihwm5n92d2jbdrcDNwMMGvWLJ89e3bB4lmwYAGF\nPH93FGNMUJxxFTqmxliyy72TzfEkV9z0JJHyMn5x4dvYf2hV3uIpCxnDqiPdWmOyGH9+ULxxFTMN\n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\n",
            "text/plain": [
              "<Figure size 720x1080 with 6 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VwvFlaqqELML",
        "colab_type": "text"
      },
      "source": [
        "# kNN with PCA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "6ZgQ47kIUCYR",
        "colab": {}
      },
      "source": [
        "# Outer cross-validation, use 100 random splits in which class balance is retained\n",
        "sss = StratifiedShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n",
        "train_auc_scores = []\n",
        "test_auc_scores = []\n",
        "train_accuracy_scores = []\n",
        "test_accuracy_scores = []\n",
        "best_estimator = []\n",
        "\n",
        "for train_index, test_index in sss.split(x, y_bin):\n",
        "    \n",
        "    X_train = x[train_index]\n",
        "    y_train = y_bin[train_index]\n",
        "    X_test = x[test_index]\n",
        "    y_test = y_bin[test_index]\n",
        "\n",
        "    # Scaling of features\n",
        "    scaler = StandardScaler()   # RobustScaler() can also be applied \n",
        "    scaler.fit(X_train)\n",
        "    X_train_scaled = scaler.transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    # PCA\n",
        "    pca = PCA().fit(X_train_scaled)\n",
        "    plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
        "    plt.xlabel('number of components')\n",
        "    plt.ylabel('cumulative explained variance');\n",
        "\n",
        "    # Feature selection - PCA\n",
        "    pca = PCA(n_components=100)\n",
        "    pca = pca.fit(X_train_scaled)\n",
        "    X_train = pca.transform(X_train_scaled)\n",
        "    X_test = pca.transform(X_test_scaled)\n",
        "    \n",
        "    # Define hyperparameters for kNN\n",
        "    kNN_parameters = {'n_neighbors': list(range(1,101)), \n",
        "                      'weights':  ['uniform', 'distance'],\n",
        "                      'metric': ['euclidean', 'manhattan']}\n",
        "\n",
        "    # Perform randomized search with cross-validation for hyperparameter optimization\n",
        "    cv_5fold = StratifiedKFold(n_splits=5)\n",
        "    grid = RandomizedSearchCV(KNeighborsClassifier(), kNN_parameters, cv=cv_5fold, refit = True, verbose = 3, random_state=42) \n",
        "    grid.fit(X_train, y_train)\n",
        "\n",
        "    print(\"The best classifier is: \", grid.best_estimator_)\n",
        "    best_estimator.append(grid.best_estimator_)\n",
        "\n",
        "    # Determine scores for train and test set\n",
        "    score_train_auc = grid.best_estimator_.predict_proba(X_train)\n",
        "    score_test_auc = grid.best_estimator_.predict_proba(X_test)\n",
        "    score_train_acc = grid.best_estimator_.score(X_train,y_train)\n",
        "    score_test_acc = grid.best_estimator_.score(X_test,y_test)\n",
        "\n",
        "    # Plot ROC curve for train and test set\n",
        "    plot_roc_curve(score_train_auc, y_train)\n",
        "    plot_roc_curve(score_test_auc, y_test)\n",
        "\n",
        "    score_train_auc_1 = score_train_auc[:, 1]\n",
        "    score_train_auc_final = roc_auc_score(y_train,score_train_auc_1)\n",
        "    score_test_auc_1 = score_test_auc[:, 1]\n",
        "    score_test_auc_final = roc_auc_score(y_test,score_test_auc_1)\n",
        "\n",
        "    train_auc_scores.append(score_train_auc_final)\n",
        "    test_auc_scores.append(score_test_auc_final)\n",
        "    train_accuracy_scores.append(score_train_acc)\n",
        "    test_accuracy_scores.append(score_test_acc)\n",
        "\n",
        "best_estimator_hyperparams = most_frequent(best_estimator)\n",
        "\n",
        "\"\"\"\n",
        "# Create numpy array of scores and calculate the mean and std\n",
        "all_train_auc = np.array(train_auc_scores)\n",
        "all_test_auc = np.array(test_auc_scores)\n",
        "\n",
        "all_train_accuracy = np.array(train_accuracy_scores)\n",
        "all_test_accuracy = np.array(test_accuracy_scores)\n",
        "\n",
        "train_scores_auc_mean = all_train_auc.mean(axis=0)\n",
        "train_scores_auc_std = all_train_auc.std(axis=0)\n",
        "\n",
        "train_scores_accuracy_mean = all_train_accuracy.mean(axis=0)\n",
        "train_scores_accuracy_std = all_train_accuracy.std(axis=0)\n",
        "\n",
        "test_scores_auc_mean = all_test_auc.mean(axis=0)\n",
        "test_scores_auc_std = all_test_auc.std(axis=0)\n",
        "\n",
        "test_scores_accuracy_mean = all_test_accuracy.mean(axis=0)\n",
        "test_scores_accuracy_std = all_test_accuracy.std(axis=0)\n",
        "\n",
        "print(f'mean train auc-score is {train_scores_auc_mean}')\n",
        "print(f'mean test auc-score is {test_scores_auc_mean}')\n",
        "print(f'mean train accuracy-score is {train_scores_accuracy_mean}')\n",
        "print(f'mean test accuracy-score is {test_scores_accuracy_mean}')\n",
        "\"\"\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6k6pUnYWV4GG",
        "colab_type": "text"
      },
      "source": [
        "# SVM classifier with L1 feature selection"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uQgfZ505VORH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Outer cross-validation, use 100 random splits in which class balance is retained\n",
        "sss = StratifiedShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n",
        "train_auc_scores = []\n",
        "test_auc_scores = []\n",
        "train_accuracy_scores = []\n",
        "test_accuracy_scores = []\n",
        "best_estimator = []\n",
        "\n",
        "for train_index, test_index in sss.split(x, y_bin):\n",
        "    \n",
        "    X_train = x[train_index]\n",
        "    y_train = y_bin[train_index]\n",
        "    X_test = x[test_index]\n",
        "    y_test = y_bin[test_index]\n",
        "\n",
        "    # Scaling of features\n",
        "    scaler = StandardScaler()     # RobustScaler() can also be applied\n",
        "    scaler.fit(X_train)\n",
        "    X_train_scaled = scaler.transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    # Feature selection - L1 method\n",
        "    selector = SelectFromModel(estimator=Lasso(alpha=10**(-10), random_state=42), threshold='median')\n",
        "    selector.fit(X_train_scaled, y_train)\n",
        "    n_original = X_train_scaled.shape[1]\n",
        "    X_train = selector.transform(X_train_scaled)\n",
        "    X_test = selector.transform(X_test_scaled)\n",
        "    n_selected = X_train.shape[1]\n",
        "    print(f\"Selected {n_selected} from {n_original} features with L1 method.\")\n",
        "    \n",
        "    # Define hyperparameters for SVM \n",
        "    SVM_param = {'C': loguniform(1e0, 1e3), \n",
        "                  'gamma': loguniform(1e-4, 1e0), \n",
        "                  'kernel': ['rbf','poly', 'linear']}  \n",
        "\n",
        "    # Perform randomized search with cross-validation for hyperparameter optimization\n",
        "    cv_5fold = StratifiedKFold(n_splits=5)\n",
        "    grid = RandomizedSearchCV(SVC(probability=True), SVM_param, cv=cv_5fold, refit = True, verbose = 3, random_state=42) \n",
        "    grid.fit(X_train, y_train)\n",
        "\n",
        "    print(\"The best classifier is: \", grid.best_estimator_)\n",
        "    best_estimator.append(grid.best_estimator_)\n",
        "\n",
        "    # Determine scores for train and test set\n",
        "    score_train_auc = grid.best_estimator_.predict_proba(X_train)\n",
        "    score_test_auc = grid.best_estimator_.predict_proba(X_test)\n",
        "    score_train_acc = grid.best_estimator_.score(X_train,y_train)\n",
        "    score_test_acc = grid.best_estimator_.score(X_test,y_test)\n",
        "\n",
        "    # Plot ROC curve for train and test set\n",
        "    plot_roc_curve(score_train_auc, y_train)\n",
        "    plot_roc_curve(score_test_auc, y_test)\n",
        "\n",
        "    score_train_auc_1 = score_train_auc[:, 1]\n",
        "    score_train_auc_final = roc_auc_score(y_train,score_train_auc_1)\n",
        "    score_test_auc_1 = score_test_auc[:, 1]\n",
        "    score_test_auc_final = roc_auc_score(y_test,score_test_auc_1)\n",
        "\n",
        "    train_auc_scores.append(score_train_auc_final)\n",
        "    test_auc_scores.append(score_test_auc_final)\n",
        "    train_accuracy_scores.append(score_train_acc)\n",
        "    test_accuracy_scores.append(score_test_acc)\n",
        "\n",
        "best_estimator_hyperparams = most_frequent(best_estimator)\n",
        "\n",
        "\"\"\"\n",
        "# Create numpy array of scores and calculate the mean and std\n",
        "all_train_auc = np.array(train_auc_scores)\n",
        "all_test_auc = np.array(test_auc_scores)\n",
        "\n",
        "all_train_accuracy = np.array(train_accuracy_scores)\n",
        "all_test_accuracy = np.array(test_accuracy_scores)\n",
        "\n",
        "train_scores_auc_mean = all_train_auc.mean(axis=0)\n",
        "train_scores_auc_std = all_train_auc.std(axis=0)\n",
        "\n",
        "train_scores_accuracy_mean = all_train_accuracy.mean(axis=0)\n",
        "train_scores_accuracy_std = all_train_accuracy.std(axis=0)\n",
        "\n",
        "test_scores_auc_mean = all_test_auc.mean(axis=0)\n",
        "test_scores_auc_std = all_test_auc.std(axis=0)\n",
        "\n",
        "test_scores_accuracy_mean = all_test_accuracy.mean(axis=0)\n",
        "test_scores_accuracy_std = all_test_accuracy.std(axis=0)\n",
        "\n",
        "print(f'mean train auc-score is {train_scores_auc_mean}')\n",
        "print(f'mean test auc-score is {test_scores_auc_mean}')\n",
        "print(f'mean train accuracy-score is {train_scores_accuracy_mean}')\n",
        "print(f'mean test accuracy-score is {test_scores_accuracy_mean}')\n",
        "\"\"\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8arSBNGqwemd",
        "colab_type": "text"
      },
      "source": [
        "# SVM classifier with PCA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u5cVLjPGwirh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Outer cross-validation, use 100 random splits in which class balance is retained\n",
        "sss = StratifiedShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n",
        "train_auc_scores = []\n",
        "test_auc_scores = []\n",
        "train_accuracy_scores = []\n",
        "test_accuracy_scores = []\n",
        "best_estimator = []\n",
        "\n",
        "for train_index, test_index in sss.split(x, y_bin):\n",
        "    \n",
        "    X_train = x[train_index]\n",
        "    y_train = y_bin[train_index]\n",
        "    X_test = x[test_index]\n",
        "    y_test = y_bin[test_index]\n",
        "\n",
        "    # Scaling of features\n",
        "    scaler = StandardScaler()   # RobustScaler() can also be applied\n",
        "    scaler.fit(X_train)\n",
        "    X_train_scaled = scaler.transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    #PCA\n",
        "    pca = PCA(n_components=100)\n",
        "    pca = pca.fit(X_train_scaled)\n",
        "    X_train = pca.transform(X_train_scaled)\n",
        "    X_test = pca.transform(X_test_scaled)\n",
        "    \n",
        "    # Define hyperparameters for SVM \n",
        "    SVM_param = {'C': loguniform(1e0, 1e3), \n",
        "                  'gamma': loguniform(1e-4, 1e0), \n",
        "                  'kernel': ['rbf','poly', 'linear']}  \n",
        "\n",
        "    # Perform randomized search with cross-validation for hyperparameter optimization\n",
        "    cv_5fold = StratifiedKFold(n_splits=5)\n",
        "    grid = RandomizedSearchCV(SVC(probability=True), SVM_param, cv=cv_5fold, refit = True, verbose = 3, random_state=42) \n",
        "    grid.fit(X_train, y_train)\n",
        "\n",
        "    print(\"The best classifier is: \", grid.best_estimator_)\n",
        "    best_estimator.append(grid.best_estimator_)\n",
        "\n",
        "    # Determine scores for train and test set\n",
        "    score_train_auc = grid.best_estimator_.predict_proba(X_train)\n",
        "    score_test_auc = grid.best_estimator_.predict_proba(X_test)\n",
        "    score_train_acc = grid.best_estimator_.score(X_train,y_train)\n",
        "    score_test_acc = grid.best_estimator_.score(X_test,y_test)\n",
        "\n",
        "    # Plot ROC curve for train and test set\n",
        "    plot_roc_curve(score_train_auc, y_train)\n",
        "    plot_roc_curve(score_test_auc, y_test)\n",
        "\n",
        "    score_train_auc_1 = score_train_auc[:, 1]\n",
        "    score_train_auc_final = roc_auc_score(y_train,score_train_auc_1)\n",
        "    score_test_auc_1 = score_test_auc[:, 1]\n",
        "    score_test_auc_final = roc_auc_score(y_test,score_test_auc_1)\n",
        "\n",
        "    train_auc_scores.append(score_train_auc_final)\n",
        "    test_auc_scores.append(score_test_auc_final)\n",
        "    train_accuracy_scores.append(score_train_acc)\n",
        "    test_accuracy_scores.append(score_test_acc)\n",
        "\n",
        "best_estimator_hyperparams = most_frequent(best_estimator)\n",
        "\n",
        "\"\"\"\n",
        "# Create numpy array of scores and calculate the mean and std\n",
        "all_train_auc = np.array(train_auc_scores)\n",
        "all_test_auc = np.array(test_auc_scores)\n",
        "\n",
        "all_train_accuracy = np.array(train_accuracy_scores)\n",
        "all_test_accuracy = np.array(test_accuracy_scores)\n",
        "\n",
        "train_scores_auc_mean = all_train_auc.mean(axis=0)\n",
        "train_scores_auc_std = all_train_auc.std(axis=0)\n",
        "\n",
        "train_scores_accuracy_mean = all_train_accuracy.mean(axis=0)\n",
        "train_scores_accuracy_std = all_train_accuracy.std(axis=0)\n",
        "\n",
        "test_scores_auc_mean = all_test_auc.mean(axis=0)\n",
        "test_scores_auc_std = all_test_auc.std(axis=0)\n",
        "\n",
        "test_scores_accuracy_mean = all_test_accuracy.mean(axis=0)\n",
        "test_scores_accuracy_std = all_test_accuracy.std(axis=0)\n",
        "\n",
        "print(f'mean train auc-score is {train_scores_auc_mean}')\n",
        "print(f'mean test auc-score is {test_scores_auc_mean}')\n",
        "print(f'mean train accuracy-score is {train_scores_accuracy_mean}')\n",
        "print(f'mean test accuracy-score is {test_scores_accuracy_mean}')\n",
        "\"\"\""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}